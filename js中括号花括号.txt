js中中括号,大括号使用详解
一、总结
一句话总结：{ } 是一个对象，[ ] 是一个数组

 
1、js大括号{}表示什么意思？
对象

{ } 大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数

 
2、js中对象的访问方式有哪些？
点
数组

所以访问时，应该用.（点）来层层访问：LangShen.Name、LangShen.AGE，当然我们也可以用数组的方式来访问，如：LangShen["Name"]、LangShen["AGE"]，结果是一样的。

 
3、中括号[]表示什么意思？
数组

[ ]中括号，表示一个数组，也可以理解为一个数组对象

 
4、对象的各个项和数组的各个项中间用什么符号隔开？
逗号

 

 
5、js中对象创建的两种方式？
大括号
函数

javascript供了另外一种简单的方式来创建对象，即大括号（{}）语法：
arr = {
a:5, //对象属性，a是变量名
b:8,
c:function(){return this.a + this.b;}, //对象方法
d:['a':1,'b':2] //对象属性，数组
}
通过大括号括住多个属性或方法及其定义（这些属性或方法用逗号隔开），来实现对象的定义，这段代码就直接定义个了具有n个属性或方法的对象，其中属性名和其定义之间用冒号（:）隔开。
document.write(arr.c());
注意，各属性间用逗号（,）隔开。使用这种方式来定义对象，还可以使用字符串作为属性（方法）名，例如：
var obj={“001”:”abc”}
因为这种简单对象没有通过构造函数创造所以也就没能在对象外添加方法。
对比构造函数创造的对象：
function Test(a,b){
this.a = a;
this.b = b;
this.c = function(){return this.a + this.b;}
}
Test.prototype.d = function another(){
return this.a * this.b * Math.PI;
};
arr = new Test(5,8);
document.write(arr.c());
输出：13
document.write(arr.d());
输出：125.66370614359172

 

 

 
二、js中中括号,大括号使用详解

一、{ } 大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数。
如：var LangShen = {"Name":"Langshen","AGE":"28"};
上面声明了一个名为“LangShen”的对象，多个属性或函数用,（逗号）隔开，因为是对象的属性，
所以访问时，应该用.（点）来层层访问：LangShen.Name、LangShen.AGE，当然我们也可以用数组的方式来访问，如：LangShen["Name"]、LangShen["AGE"]，结果是一样的。
该写法，在JSON数据结构中经常用，除此之外，我们平时写函数组的时候，也经常用到，如：
var LangShen = {
Name = function(){
return "LangShen";
},
Age = function(){
return "28";
}
}
调用方式差不多，因为是函数组，所以要加上()，如：alert( LangShen.Name() );
二、[ ]中括号，表示一个数组，也可以理解为一个数组对象。
如：var LangShen = [ "Name","LangShen","AGE","28" ];
很明显，每个值或函数，都是独立的，多个值之间只用,（逗号）隔开，因为是数组对象，所以它等于：
var LangShen = Array( "Name","LangShen","AGE","28" );
访问时，也是和数组一样，alert( LangShen[0] );
三、{ } 和[ ] 一起使用，我们前面说到，{ } 是一个对象，[ ] 是一个数组，我们可以组成一个对象数组，如：
var LangShen = { "Name":"Langshen",
"MyWife":[ "LuLu","26" ],
"MySon":[{"Name":"Son1"},{"Name":"Son2"},{"Name":"Son3"}]
}
从上面的结构来看，是一个对象里面的第一项是个属性，第二项是一个数组，第三个是包含有多个对象的数组。调用起来，也是一层一层访问，对象的属性用.（点）叠加，数组用 [下标] 来访问。
如：alert( LangShen.MySon[1].Name ) ;

 

 

============下面是另外一篇介绍==================================================

一、大括号｛｝表示对象：

javascript供了另外一种简单的方式来创建对象，即大括号（{}）语法：
arr = {
a:5, //对象属性，a是变量名
b:8,
c:function(){return this.a + this.b;}, //对象方法
d:['a':1,'b':2] //对象属性，数组
}
通过大括号括住多个属性或方法及其定义（这些属性或方法用逗号隔开），来实现对象的定义，这段代码就直接定义个了具有n个属性或方法的对象，其中属性名和其定义之间用冒号（:）隔开。
document.write(arr.c());
注意，各属性间用逗号（,）隔开。使用这种方式来定义对象，还可以使用字符串作为属性（方法）名，例如：
var obj={“001”:”abc”}
因为这种简单对象没有通过构造函数创造所以也就没能在对象外添加方法。
对比构造函数创造的对象：
function Test(a,b){
this.a = a;
this.b = b;
this.c = function(){return this.a + this.b;}
}
Test.prototype.d = function another(){
return this.a * this.b * Math.PI;
};
arr = new Test(5,8);
document.write(arr.c());
输出：13
document.write(arr.d());
输出：125.66370614359172

二、中括号 [ ] 表示数组：
arr = [
[1,2], //数组
['a','b'],
[{c:'a1',d:'b1'},{e:'a2',f:'b2'}] //对象
];
for(key in arr){
for(chikey in arr[key]){
document.write(chikey + "=>" + arr[key][chikey] + "<br />");
}
}
输出：
0=>1
1=>2
0=>a
1=>b
0=>[object Object]
1=>[object Object]
document.write(arr[2][1].e);
输出：a2
这里，数组的第三组是未命名的对象，可以用arr[2][1].e的方式指定访问属性。当然也可以遍历：
for(key in arr[2]){
for(val in arr[2][key]){
document.write(val + "=>" + arr[2][key][val] + "<br />");
}
}
输出：
c=>a1
d=>b1
e=>a2
f=>b2

三、数组与对象
在js中，上述的对象与数组的创建很相似，有人称第一种方式为js的关联数组，姑且吧；但在中括号中就不能使用['a':'b']的形式，只能以索引数组的形式，即下标只能是数字，如[1,2]或['a','b']，这点须注意。
