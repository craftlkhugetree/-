1.console.table(tabledata, tablecolumns)	必须是数组的形式
指定表格表头标题名，参数只能是对应的键名：
var site1 = { name : "Runoob", site : "www.runoob.com" }
var site2 = { name : "Google", site : "www.google.com" }
var site3 = { name : "Taobao", site : "www.taobao.com" }
 
console.table([site1, site2, site3], ["site"]);

localStorage.getItem("todolist")得到的是字符串，无法table，必须
console.table(JSON.parse(localStorage.getItem("todolist")))
才行。

2.The following example returns all the <p> elements that contain <a> elements:
$x("//p[a]")
Similar to the other selector functions, $x(path) has an optional second parameter, startNode, that specifies an element or Node from which to search for elements. 

var images = $$('img', document.querySelector('.devsite-header-background'));
   for (each in images) {
       console.log(images[each].src);
   }

3.clear()

4.copy($0);

5.dir(object) displays an object-style listing of all the specified object's properties. This method is an alias for the Console API's console.dir() method.

 >dir(document.body);

6.dirxml(object) prints an XML representation of the specified object, as seen in the Elements tab. This method is equivalent to the console.dirxml() method.

7.getEventListeners(object) returns the event listeners registered on the specified object. The return value is an object that contains an array for each registered event type (click or keydown, for example). The members of each array are objects that describe the listener registered for each type. For example, the following lists all the event listeners registered on the document object:
>getEventListeners(document);

8.keys(object) returns an array containing the names of the properties belonging to the specified object. To get the associated values of the same properties, use values(object).

9.monitor(function) When the function specified is called, a message is logged to the console that indicates the function name along with the arguments that are passed to the function when it was called.
Use unmonitor(function) to cease monitoring.

10.monitorEvents(object[, events])
 monitorEvents(window, "resize");
 monitorEvents(window, ["resize", "scroll"])

You can also specify one of the available event "types", strings that map to predefined sets of events. The table below lists the available event types and their associated event mappings:

Event type & Corresponding mapped events
mouse 	"mousedown", "mouseup", "click", "dblclick", "mousemove", "mouseover", 	"mouseout", "mousewheel"
key 	"keydown", "keyup", "keypress", "textInput"
touch 	"touchstart", "touchmove", "touchend", "touchcancel"
control "resize", "scroll", "zoom", "focus", "blur", "select", "change", 		"submit", "reset"

For example, the following uses the "key" event type all corresponding key events on an input text field currently selected in the Elements panel.

    monitorEvents($0, "key");


11.queryObjects(Constructor)

Call queryObjects(Constructor) from the console to return an array of objects that were created with the specified constructor. For example:

    queryObjects(Promise). Returns all Promises.
    queryObjects(HTMLElement). Returns all HTML elements.
    queryObjects(foo), where foo is a function name. Returns all objects that were instantiated via new foo().

The scope of queryObjects() is the currently-selected execution context in the console.

12.table(data[, columns])

13.Hit F1 to settings.
ctrl+shift+p	for commands
ctrl+shift+t	for reopen
alt+rightarrow	tab forward