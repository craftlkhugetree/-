https://www.bookstack.cn/read/ng.ant.design-v8.0/49687de66a121932.md的模拟接口

 <div nz-col nzSpan="6">
        <nz-form-item>
          <nz-form-label [nzSpan]="6">按月份查询</nz-form-label>
          <nz-form-control [nzSpan]="12">
同一行的“查询”按钮，因为没加 nz-form-control而在页面缩放中丢失位置。

不同tab要不同date，日期不干扰，ngModel.
回退index，不能只传i，要多页序号过来。
操作人员是当前登录人员，而不是上传文件的那个人。！
上传excel文件，不按表头。搜索。排序。回退。自动进入input，按回车触发搜索。ngOnInit()内部不能用返回值函数？还是说没有获取到组织ID？返回的日期不是Date类型，要new Date()转化，再管道|date:'yyyy-MM'或者直接getFullYear()，dataQuery()同一个result两个标签。
回退时来个输入框。

  current_org = JSON.parse(window.sessionStorage.getItem('zw_currentOrg'));
要放在构造函数和ngOnInit()下面？？？哪里都不行啊，能否获取数据再switchOrgID()???
  accTemp = JSON.parse(window.sessionStorage.getItem('zw_loginInfo'));则无所谓。。。
initdataIn和query()能否合并？？？

按对象日期降序排序：    resData.sort((x,y)=>{return y.createTime.getTime()-x.createTime.getTime()})

浅拷贝，一变都变，很麻烦。需要深拷贝，来复制出独立数据。扩展运算符实现深拷贝：
// 当value是基本数据类型，比如String，Number，Boolean时，是可以使用扩展运算符进行深拷贝的
// 当value是引用类型的值，比如Object，Array，引用类型进行深拷贝也只是拷贝了引用地址，所以属于浅拷贝
var car = {brand: "BMW", price: "380000", length: "5米"}
var car1 = { ...car, price: "500000" }
console.log(car1); // { brand: "BMW", price: "500000", length: "5米" }
console.log(car); // { brand: "BMW", price: "380000", length: "5米" }

利用filter结合indexOf，可以巧妙地去除Array的重复元素：
deleteRepElements() {
    var newPhotos, oldPhotos = ['x1', 'x2', 'x3', 'x2', 'x3', 'x4'];
    newPhotos = oldPhotos.filter(function (element, index, self) {
    	return self.indexOf(element) === index;
    });
    console.log(newPhotos)
}
因为indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。


判断变量a为非空，未定义或者非空串才能执行方法体的内容
var a;
if(a!=null&&typeof(a)!=undefined&&a!=''){
    //a有内容才执行的代码  
}
实际上我们只需要写一个判断表达：
if(!!a){
    //a有内容才执行的代码...  
}
就能和上面达到同样的效果。a是有实际含义的变量才执行方法，否则变量null，undefined和''空串都不会执行以下代码。 !!a==Boolean(a)

因为javascript是弱类型的语言（变量没有固定的数据类型）所以有时需要强制转换为相应的类型
类似的如:

a = parseInt("1234")        //转换为数字 
a = "1234" + 0              //转换为数字 
b = 1234 + ""               //转换为字符串 
c = someObject.toString()   //将对象转换为字符串 
其中：
    第1种、第4种为显式转换
    第2种、第3种为隐式转换

布尔型的转换，javascript约定和c类似，规则为：
    false、undefinded、null、0、“” 为 false
    true、1、“somestring”、[Object] 为 true
~是按位取反的意思，表现出来的现象是 ~X = -(X+1)

(keydown)="($event.which === 13) ? search() : 0"
或者在js文件里：
  keydown(e:any){
    if(e.which===13){
      this.search()
    }
  }


import * as  differenceInCalendarDays from 'date-fns/difference_in_calendar_days';
//禁用未来日期，移动端是maxDate,minDate
disabledDate = (current: Date): boolean => {
    return differenceInCalendarDays(current, new Date()) > 0;
  }

1.两个思路：根据日期条件get数据；get全部数据后再根据日期filter。

2.ng-zorro的样式可以在html里 <style></style>或者内联式，
下面修改了tab标签页样式（分为激活页和其他页），消除tab card左边距，隐藏tab标签下的横线，table内容居中。
@Component(
	styles: [
    `
      // ::ng-deep app-reserve-management-change-record .ant-tabs.ant-tabs-card .ant-tabs-card-bar .ant-tabs-tab-active {
      //   color: #fff;
      //   background: #1890ff;
      //   border-radius: 0;
      // }
      // ::ng-deep .ant-tabs.ant-tabs-card .ant-tabs-card-bar .ant-tabs-tab {
      //   border-radius: 0;
      // }
      // ::ng-deep div.ant-card-head.ng-star-inserted {
      //   padding: 0 0;
      // }
      ::ng-deep nz-tabset .ant-tabs-bar {
        border: hidden;
      }
      ::ng-deep .ant-table-thead > tr > th,
      .ant-table-tbody > tr > td {
        text-align: center;
      }
    `,
  ],
})
这里面有中文注释就无效了。。。


3.
some():方法用于检测数组中的元素是否有满足指定条件的，若满足返回true，否则返回false；
every():方法用于检测数组中所有元素是否都符合指定条件，若符合返回true，否则返回false；

    array.some(function(item,index,array){
          //item:当前元素的值；
     
          //index:当前元素的索引；
     
          // array:当前元素的数组对象；
     
    })

some()方法会依次执行数组的每个元素；
如果有一个元素满足条件，则表达式返回true，剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false
注意：some()不会对空数组进行检测；
some()和every()都不会改变原始数组；

4.
属性或参数中使用 ？表示该属性或参数为可选项

属性或参数后使用 ！表示强制解析（告诉typescript编译器，这里一定有值），常用于vue-decorator中的@Prop，如果为空，会丢出断言失败。

变量后使用 ！表示类型推断排除null、undefined

0 ? 1 : 2
	//得到2，可用于数组长度是否为零
9 ？1 : 2	//得到1

5.

<nz-divider nzType="vertical"></nz-divider> 小竖线
<nz-dropdown>	下拉列表还可以用模板导入[nzDropdownMenu]="menu"
            <a class="ant-dropdown-link" nz-dropdown>
              More <i nz-icon type="down"></i> 向下图标
            </a>
            <ul nz-menu>
              <li nz-menu-item>
                <a (click)="act()">active</a>
              </li>
            </ul>
</nz-dropdown>
如果nz-dropdown 下的 nz-menu 默认不可选中。如果需要菜单可选中，可以指定 <ul nz-menu nzSelectable>.

每个 nz-dropdown-menu 只能作为一个 [nz-dropdown] 的输入项,nzCustomFilter表示自定义搜索（没用自带的那套filterFn）

6. funThreeDot( ...args) {
    console.log( args.length);
  };
this.funThreeDot( ...[1, 2, 3]);  // len = 3
    
this.funThreeDot([1,2,3]);        // len = 1，当做数组对象

7.
  @ViewChild('myInput',{static:false}) myInput: ElementRef; //终于找到了这个DOM
//input焦点
  ngAfterViewChecked() {
   
     this.myInput.nativeElement.focus() 
  }

8.//链式语法构建 HttpParams 对象。这是因为 HttpParams 对象是不可变的，通过 set()方法可以防止该对象被修改。
let params = new HttpParams() 
      .append('page', `${pageIndex}`)
      .append('results', `${pageSize}`)
      .append('sortField', sortField)
      .append('sortOrder', sortOrder);
每当调用 set() 方法，将会返回包含新值的 HttpParams 对象，因此如果使用下面的方式，将不能正确的设置参数。
  const params2= new HttpParams();
  params2.set('orderBy', '"$key"');

假设发送 Get 请求时，需要设置对应的查询参数，预期的 URL 地址如下：
https://angular-http-guide.firebaseio.com/courses.json?orderBy="$key"&limitToFirst=1

创建 HttpParams 对象

    import {HttpParams} from "@angular/common/http";
     
    const params = new HttpParams()
        .set('orderBy', '"$key"')
        .set('limitToFirst', "1");
     
    this.courses$ = this.http
        .get("/courses.json", {params})
        .do(console.log)
        .map(data => _.values(data))
  params2.set('limitToFirst', "1");