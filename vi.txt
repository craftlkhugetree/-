- y: copy URL in current tab
 "p": { "type": "urls.paste", "newTab": false },

y+P

- gu: go to parent directory
- gU: go to root directory
 "gi": { "type": "focus.input" },
 ".": { "type": "repeat.last" },


ctrl+r 对应于 u
为了便于选取文本，VIM 引入了可视(Visual)模式。 要选取一段文本，首先将光标移到段首，在普通模式下按 v 进入可视模式，然后把光标移到段末。 需要注意，光标所在字符是包含在选区中的。这就不用ctrl+shift+上下了。

v 进入字符可视化模式
V 进入行可视化模式
Ctrl+v 进入块可视化模式

在表格中删除指定列非常有用

用 v 命令进入的字符可视化模式（Characterwise visual mode)。文本选择是以字符为单位的。

用 V 命令进入的行可视化模式（Linewise visual mode)。文本选择是以行为单位的。

用 ctrl-V 进入的块可视化模式（Blockwise visual mode）。可以选择一个矩形内的文本。

选择： 
选中{}中间的内容,不包括{}
va{ 选中{}中间内容，包括{}
选中()中间内容
vi< 选中<>中间内容
vi[ 选中[]中间内容
vit 选中中间的内容
vi” 选中”"中间内容
vi’ 选中”中间的内容、
vis 选中一个句子
vib 选中一个block
viw 选中一个单词
vip 选中一个段落

G 从光标所在处选择到结尾

操作：

这时可以对所选的文本进行一些操作，

常用的(可视模式)命令有：

x或d 剪切(即删除，同时所选的文本进入剪贴板)

y 复制

r字符 所有字符替换为新字符

u U ~ 分别是所有字母变小写、变大写、反转大小写

“>”和“<" 将选中字符右移或左移 shiftwidth位置

当输入了命令以后，VIM 将回到普通模式，这时可以按 p 或 P 进行粘贴。普通模式下有关复制和粘贴的命令：

p或P 在当前位置粘贴剪贴板的内容，p 粘在光标所在字符后面，P 粘在前面。

d 与 D 的区别

d只删除选中的字符，而D删除选中字符所在行的所有字符， c 和 C ， y 和 Y 同理

我们还可以利用可视化模式，来合并多行文本。 J 命令可以将高亮显示的文本内容合并为一行，同时以空格来分隔各行。如果不希望在行间插入空格，那么可以使用 gJ 命令。

使用 g? 命令，可以使用rot 13算法来加密高亮显示的文本。针对同一个文本再次执行加密命令，就可以进行文本解密。

在可视化模式下，按下 : 键就可以对选定范围进行操作。例如：我们先在可视化模式下选中文本，然后执行 :write block.txt 命令，就可以将文本块写入另一文件中。选择多行，然后执行 :sort 命令，则可以对选中的文本进行排序。

查看Visual Mode下的命令

:help v_， 例如使用 :help v_d 命令，可以得到关于在可视模式下进行删除操作的帮助信息。
在全部内容的行首添加//号注释

:% s/^/\/\//g

在2~50行首添加//号注释

:2,50 s/^/\/\//g

在2~50行首删除//号

:2,50 s/^\/\///g

:% s/^.\{4\}//g
将当前缓冲区的所有行的前4个字符删除  其中 ^. 为删除行首第一个字符
^.. 为行首头俩字符，以此类推。 

 sed -i '4 d' findZeal_reactMain.sh	删除第四行
$ sed -i '/^s*$/ d' zzz	删除空白行

如果需要删除文章中的空行，可以使用一下语句：
:g/^s*$/d
简单解释一下：
g ：全区命令
/ ：分隔符
^s*$ ：匹配空行，其中^表示行首，s表示空字符，包括空格和制表符，*重复0到n个前面的字符，$表示行尾。连起来就是匹配只有空字符的行，也就是空行。
/d ：删除该行

vscode 	为了使用ctrl键要在用户设置输入   "vim.useSystemClipboard": true,
ciw 	剪切光标位置所在的单词，并输入。
cw 	剪切光标位置所在的单词剩余部分，并输入。
dw	只剪切，还在normal模式
db	往前删
删前一个是 ctrl h w u，但是vscode占了ctrl键。

vim 之所以高效一个原因是对文本进行了抽象，如一个单词 一个句子 一个段落，就是文本对象（text-objects ）。配合 d（delete） c(change) 可以一次性操作不同大小的文本对象，如 ‘dap’ 可以删除一个函数所有内容, daw 删除光标所在的单词及周围的空格。

console.log(Function instanceof Object ) 参数对调
 daw w viwp F( p


怎么样替换一个单词呢，首先光标指向你想用的那个单词。

yiw

现在光标指向的这个单词已经存到vim的寄存器里边了

viwp

这样就可以完成替换单词。

另外vim还提供了文本对象操作的范围关键字 a 和 i。
iw: inner word 光标在单词里面任何位置操作单词，如 diw 可以删除光标所在的单词，比dw方便很多。
aw: around word, 它会选中当前单词，同时包含当前单词之后的空格。比如 diw 可以删除当前单词。


vim-surround 处理环绕文本操作，如引号 ” 括号（）方括号[] 花括号{} xml html标签等。
例子:

    "test" 输入 cs"'修改为 'test'
    "test" 输入ds" 修改为 test
    "test" 输入 cs"t and enter 123>修改为<123>test</123>
    test 输入 ysaw) 修改为 (test)


一行之中，往前搜索是F，往后是f，如果要找到字母有重复，比如要找    <link rel="stylesheet" href="css/index.css">中的第5个e，可以  5fe

如果要千万第80列，可以  ESC80|
:1,.d 	清空全文


vim 提供了 3 个基本模式：normal ， insert , visual。
后来发现 insert 模式下通过 ctrl+h ctrl+w ctrl+u 来删除前一个字符，前一个单词，前面一行所有字符非常方便。
在 normal 模式下转 insert 模式，有三种途径。

操作() "" [] {} 中间的内容, Surround 模式下用cs{ ds{ 命令就可以修改 或者删除{} 之内的字符。


vim的最优秀的功能之一就是能够精确、快速地控制光标。具体的移动按键如下：
按键 	作用
j 	向下
k 	向上
h 	向左
l 	向右
w 	下一个字符的首字母
e 	下一个字符的某位字母
b 	上一个字符的首字母
G 	跳到文件结尾
gg 	跳到文件开头
0 	数字0，跳到一行开始
shift+4 	跳到一行末尾
2.3 选中功能

选中的作用主要用于能够剪切、复制和粘贴
按键 	作用
v+w 	打开选中模式，并向后移动一个单词
v+b 	打开选中模型，并向前移动一个单词
v+i+w 	打开选中模式，并选中当前单词


剪切
快捷键方式：

dd：剪切光标所处当前行
n + dd：剪切光标所在行及以下共 n 行
按 p 粘贴在光标所在行

命令行方式：

例如剪切1到10行，并粘贴在12行处：
1，10 m 12

复制
快捷键方式：

yy：复制光标所处当前行
n + yy：复制光标所在行及以下共 n 行
按 p 粘贴在光标所在行

命令行方式：

例如复制1到10行，并粘贴在12行处：
1，10 co 12

删除
快捷键方式：

dd：删除光标所处当前行
n + dd：删除光标所在行及以下共 n 行

命令行方式：

例如删除1到10行：
1，10 de


1. 选定文本块。使用v进入可视模式，移动光标键选定内容。

2.复制的命令是y，即yank（提起） ，常用的命令如下：
    y      在使用v模式选定了某一块的时候，复制选定块到缓冲区用；
    yy    复制整行（nyy或者yny ，复制n行，n为数字）；
    y^   复制当前到行头的内容；
    y$    复制当前到行尾的内容；
    yw   复制一个word （nyw或者ynw，复制n个word，n为数字）；
    yG    复制至档尾（nyG或者ynG，复制到第n行，例如1yG或者y1G，复制到档尾） 
    5yl  复制右侧5个字符
   
3. 剪切的命令是d，即delete，d与y命令基本类似，所以两个命令用法一样，包括含有数字的用法. 
    d      剪切选定块到缓冲区；
    dd    剪切整行
    d^    剪切至行首
    d$     剪切至行尾
    dw    剪切一个word
    dG     剪切至档尾 
   
4. 粘贴的命令式p，即put（放下）
    p      小写p代表贴至游标后（下），因为游标是在具体字符的位置上，所以实际是在该字符的后面
    P      大写P代表贴至游标前（上）
    整行的复制粘贴在游标的上（下）一行，非整行的复制则是粘贴在游标的前（后）

注：
     在正则表达式中，^表示匹配字符串的开始位置，$表示匹配字符串的结束位置。
     命令前面加数字表示重复的次数，加字母表示使用的缓冲区名称。使用英文句号"."可以重复上一个命令。
     在复制粘贴时，另一组常用的命令是u（撤销操作），U（撤销某一行最近所有修改），Ctrl+R（重做），这些功能主要是vim中的，vi中略有差别
――――――――――――――――

替换当前行第一个 vivian为sky
1
	
:s/vivian/sky/

替换当前行所有 vivian为sky
1
	
:s/vivian/sky/g

替换第 n 行开始到最后一行中，每一行的第一个vivian为sky
1
	
:n,$s/vivian/sky/

替换第 n 行开始到最后一行中，每一行所有vivian为sky
n为数字，若n为.，表示从当前行开始到最后一行
1
	
:n,$s/vivian/sky/g

替换每一行的第一个vivian为sky(等同于 :g/vivian/s//sky/)
1
	
:%s/vivian/sky/

替换每一行中所有 vivian为sky(等同于 :g/vivian/s//sky/g)
1
	
:%s/vivian/sky/g