 browser-sync start --server --files "css/*.css, *.html"
ctrl+h批量替换 vscode中内容
插件：angular，ionic，swiper-snippets，Chinese (Simplified)，Markdown，Vim，Live Server

VsCode中，使用VIM插件后，ctrl+c不能用，可以通过 File -> Preference -> Settings中   vim.useCtrlKeys 选项设置为 false即可。

ctrl+[]	增减缩进
ctrl+y	恢复撤销
CTRL + K CTRL + S = 显示快捷键方式
ctrl+b	侧边栏
ctrl+j	cmd栏
F8	下一个错误
ctrl+End/Home	文件末尾/开头
alt+点击行  可以多行同时输入
 SHIFT + ALT + I = 在所选的每一行的末尾插入光标
ctrl+h	替换
CTRL + F2 = 选中所有匹配项
ctrl+/ 注释
ctrl+k+f  格式化选定文档
ctrl+shift+[  折叠部分区域
ctrl+g	跳转行号
ctrl+L	选中当前行
ctrl+shift+L	选中所有找到的匹配项
CTRL + K Z = 切换禅模式

ul>li>a>img
.box$*3
div.box1+.box2+box3
	<div class="box1"></div>
    	<div class="box2"></div>
    	<box3></box3>
命令行code . 新窗口vscode打开当前文件夹
ul>li.item*5
<ul>
    <li class="item1"></li>
    <li class="item2"></li>
    <li class="item3"></li>
    <li class="item4"></li>
    <li class="item5"></li>
</ul>
ul>li.item#*5	多个#则带着id
div*5	ul>li*5
!+Tab	h5页面
lorem+tab	可以生成一堆英文
ctrl+,ctrl+k	ctrl+space	IntelliSense
ctrl+k,ctrl+f	格式化	alt+shift+f


alt+上下：当前行上下移动
alt+左右：光标间移动     F12		转到定义
alt+shift+方向 	复制方向
ctrl+Ins	复制当前行
ctrl+x		删除一行
ctrl+enter	快速换行
ctrl+home/end	第一行/最后

shift+左右	选中左右单词
ctrl+shift+箭头	选到末尾或开头
shift+上下	选中上下行	ctrl+/	注释
ctrl+back	删左边单词
ctrl+shift+l	选中相邻行相同的单词

F8		在error间切换
ctrl+F2		批量替换 Hit F2 while in the symbol Book to rename all instances.
// Reference the function

new Book("War of the Worlds", "H G Wells");

new Book("The Martian", "Andy Weir");


/**
 * Represents a book.
 
*
 * @param {string} title Title of the book
 
* @param {string} author Who wrote the book
 
*/

function Book(title, author) {
    this.title = title;
    this.author = author;
}


ctrl+shift+T	重开标签页
ctrl+shift+pgUp/pgDown	移动标签页
ctrl+k,ctrl+o	打开文件夹
ctrl+k f	关闭文件夹
ctrl+k,ctrl+w	关闭所有页面

ctrl+shift+`	打开新终端
ctrl+`		回到终端

ctrl+shift+f	搜索所有文本
ctrl+shift+e	资源管理器	ctrl+shift+x	扩展
ctrl+t		#
ctrl+shift+p	>
ctrl+k,ctrl+s 	快捷键编辑	“折叠文件夹”+shift+alt+x


ctrl+alt+左右	文件分组间移动	ctrl+1，2	分组间移动
alt+1,2		标签间移动
ctrl+0		foucs侧边栏
ctrl+,		打开设置,可以修改是否自动保存


我们常常会比较习惯于在元素的属性中以data-xxxx保存一些简单的数据，因此保存索引也可以这么干
var a=document.getElementsByTagName("li");
for(var i in a) {
    a[i].setAttribute('data-index', i);
}

如下的HTML结构：

JavaScript

Java

Python

Ruby

Swift

Scheme

Haskell

<!-- HTML结构 -->
<div id="test-div">
<div class="c-red">
    <p id="test-p">JavaScript</p>
    <p>Java</p>
  </div>
  <div class="c-red c-green">
    <p>Python</p>
    <p>Ruby</p>
    <p>Swift</p>
  </div>
  <div class="c-green">
    <p>Scheme</p>
    <p>Haskell</p>
  </div>
</div>

请选择出指定条件的节点：

'use strict';
// 选择<p>JavaScript</p>:
var js = document.getElementById('test-p');
var js = document.querySelector('#test-p');

// 选择<p>Python</p>,<p>Ruby</p>,<p>Swift</p>:
var arr = document.getElementsByClassName('c-red')[1].children;
var arr = document.getElementsByClassName('c-red')[1].getElementsByTagName('p');
var arr = document.querySelectorAll('div.c-red.c-green > p');
var arr = document.querySelectorAll('.c-red.c-green > p');
var arr = document.querySelectorAll('div[class="c-red c-green"] > p');


// 选择<p>Haskell</p>:
var haskell = document.getElementsByClassName('c-green')[1].lastElementChild;
var haskell = document.querySelectorAll('div[class="c-green"] > p')[1];
var haskell = document.querySelectorAll('.c-green > p')[4];

// 测试:
if (!js || js.innerText !== 'JavaScript') {
    alert('选择JavaScript失败!');
} else if (!arr || arr.length !== 3 || !arr[0] || !arr[1] || !arr[2] || arr[0].innerText !== 'Python' || arr[1].innerText !== 'Ruby' || arr[2].innerText !== 'Swift') {
    console.log('选择Python,Ruby,Swift失败!');
} else if (!haskell || haskell.innerText !== 'Haskell') {
    console.log('选择Haskell失败!');
} else {
    console.log('测试通过!');
}


有如下的HTML结构：

JavaScript

Java

<!-- HTML结构 -->
<div id="test-div">
  <p id="test-js">javascript</p>
  <p>Java</p>
</div>

请尝试获取指定节点并修改：
'use strict';
// 获取<p>javascript</p>节点:
var js = document.getElementById('test-js');


// 修改文本为JavaScript:
// TODO:
js.innerHTML = 'JavaScript';

// 修改CSS为: color: #ff0000, font-weight: bold
// TODO:
js.style.color='#ff0000';
js.style.fontWeight='bold';
// 测试:
if (js && js.parentNode && js.parentNode.id === 'test-div' && js.id === 'test-js') {
    if (js.innerText === 'JavaScript') {
        if (js.style && js.style.fontWeight === 'bold' && (js.style.color === 'red' || js.style.color === '#ff0000' || js.style.color === '#f00' || js.style.color === 'rgb(255, 0, 0)')) {
            console.log('测试通过!');
        } else {
            console.log('CSS样式测试失败!');
        }
    } else {
        console.log('文本测试失败!');
    }
} else {
    console.log('节点测试失败!');
}



