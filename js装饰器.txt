Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）
Object.getOwnPropertyDescriptor(obj, prop)

obj
    需要查找的目标对象
prop
    目标对象内属性名称 
如果指定的属性存在于对象上，则返回其属性描述符对象（property descriptor），否则返回 undefined。


一个属性描述符是一个记录，由下面属性当中的某些组成的：

value
    该属性的值(仅针对数据属性描述符有效)
writable
    当且仅当属性的值可以被改变时为true。(仅针对数据属性描述有效)
get
    获取该属性的访问器函数（getter）。如果没有访问器， 该值为undefined。(仅针对包含访问器或设置器的属性描述有效)
set
    获取该属性的设置器函数（setter）。 如果没有设置器， 该值为undefined。(仅针对包含访问器或设置器的属性描述有效)
configurable
    当且仅当指定对象的属性描述可以被改变或者属性可被删除时，为true。
enumerable
    当且仅当指定对象的属性可以被枚举出时，为 true。 

var o, d;

o = { get foo() { return 17; } };
d = Object.getOwnPropertyDescriptor(o, "foo");
// d {
//   configurable: true,
//   enumerable: true,
//   get: /*the getter function*/,
//   set: undefined
// }

o = { bar: 42 };
d = Object.getOwnPropertyDescriptor(o, "bar");
// d {
//   configurable: true,
//   enumerable: true,
//   value: 42,
//   writable: true
// }


apply() 方法与 call() 方法非常相似：
在本例中，person 的 fullName 方法被应用到 person1：
实例

var person = {
    fullName: function() {
        return this.firstName + " " + this.lastName;
    }
}
var person1 = {
    firstName: "Bill",
    lastName: "Gates",
}
person.fullName.apply(person1);  // 将返回 "Bill Gates"

call() 方法分别接受参数。

apply() 方法接受数组形式的参数。

如果要使用数组而不是参数列表，则 apply() 方法非常方便。




function doSomething(name) {
  console.log('Hello, ' + name);
}

function loggingDecorator(wrapped) {
  return function() {
    console.log('Starting');
    const result = wrapped.apply(this, arguments);/*调用了doSomething,this就是*/
    console.log('Finished');
    return result;
  }
}
const wrapped = loggingDecorator(doSomething);


doSomething('Graham');
// Hello, Graham

wrapped('Graham');
// Starting
// Hello, Graham
// Finished
